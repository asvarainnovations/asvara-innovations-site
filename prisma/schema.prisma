generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  passwordHash  String
  fullName      String?
  role          UserRole      @default(USER)
  isActive      Boolean       @default(true)
  deletedAt     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  mfaEnabled    Boolean       @default(false)
  mfaSecret     String?
  name          String?
  emailVerified DateTime?
  image         String?
  gender        String?
  accounts      Account[]
  apiKeys       ApiKey[]
  auditLogs     AuditLog[]
  sessions      Session[]
  subscriptions Subscription[]
  chatSessions  ChatSession[]
  feedbacks     Feedback[]
  admin         Admin?
  
  // PleadSmart-specific relations
  pleadsmartChatSessions    PleadSmartChatSession[]
  pleadsmartDocuments       PleadSmartDocument[]
  pleadsmartRagQueryLogs    PleadSmartRagQueryLog[]
  pleadsmartAgentMemories   PleadSmartAgentMemory[]
  pleadsmartFeedbacks       PleadSmartFeedback[]
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  createdBy String?  // References another admin who invited them
  active    Boolean  @default(true)
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdByAdmin Admin? @relation("AdminInvites", fields: [createdBy], references: [id])
  invitedAdmins Admin[] @relation("AdminInvites")
  invites   AdminInvite[]
  
  @@index([userId])
  @@index([createdBy])
}

model Service {
  id            String             @id @default(uuid())
  key           String             @unique
  name          String
  description   String?
  logoUrl       String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  apiKeys       ApiKey[]
  subscriptions Subscription[]
  plans         SubscriptionPlan[]
}

model SubscriptionPlan {
  id            String          @id @default(uuid())
  serviceId     String
  name          String
  priceCents    Int
  interval      BillingInterval
  description   String?
  isActive      Boolean         @default(true)
  trialDays     Int?
  features      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  subscriptions Subscription[]
  service       Service         @relation(fields: [serviceId], references: [id])
}

model Subscription {
  id                String             @id @default(uuid())
  userId            String             @unique
  planId            String
  serviceId         String
  status            SubscriptionStatus @default(ACTIVE)
  startDate         DateTime
  endDate           DateTime?
  renewalDate       DateTime?
  canceledAt        DateTime?
  paymentProviderId String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  plan              SubscriptionPlan   @relation(fields: [planId], references: [id])
  service           Service            @relation(fields: [serviceId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
}

model ApiKey {
  id         String    @id @default(uuid())
  userId     String
  serviceId  String
  token      String    @unique
  revoked    Boolean   @default(false)
  revokedAt  DateTime?
  expiresAt  DateTime?
  lastUsedAt DateTime?
  name       String?
  createdAt  DateTime  @default(now())
  service    Service   @relation(fields: [serviceId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
}

enum BlogStatus {
  PENDING
  APPROVED
  REJECTED
  SCHEDULED
  PUBLISHED
}

model BlogPost {
  id            String      @id @default(uuid())
  title         String
  excerpt       String?
  content       String
  status        BlogStatus  @default(PENDING)
  tags          BlogTag[]   @relation("PostTags")
  coverImage    String?
  attachments   BlogAttachment[]
  author        BlogAuthor? @relation(fields: [authorId], references: [id])
  authorId      String?
  publicationId String?     @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publishedAt   DateTime?
  editorId      String?
  versions      BlogVersion[]
  submission    BlogSubmission? @relation("PostSubmission", fields: [submissionId], references: [id])
  submissionId  String? @unique
}

model BlogSubmission {
  id            String      @id @default(uuid())
  post          BlogPost?   @relation("PostSubmission")
  authorName    String
  authorEmail   String
  socialProfile String?
  title         String
  excerpt       String?
  content       String
  tags          String[]
  coverImage    String?
  attachments   BlogAttachment[]
  consent       Boolean
  status        BlogStatus  @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model BlogTag {
  id      String      @id @default(uuid())
  name    String      @unique
  posts   BlogPost[]  @relation("PostTags")
}

model BlogAttachment {
  id           String   @id @default(uuid())
  url          String
  type         String
  post         BlogPost? @relation(fields: [postId], references: [id])
  postId       String?
  submission   BlogSubmission? @relation(fields: [submissionId], references: [id])
  submissionId String?
}

model BlogAuthor {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  avatar    String?
  bio       String?
  social    String?
  posts     BlogPost[]
}

model BlogVersion {
  id        String   @id @default(uuid())
  post      BlogPost @relation(fields: [postId], references: [id])
  postId    String
  content   String
  createdAt DateTime @default(now())
  editorId  String?
}

model ChatSession {
  id        String      @id @default(uuid())
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  messages  ChatMessage[]
  feedbacks Feedback[]
  user      User        @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id              String      @id @default(uuid())
  sessionId       String
  role            MessageRole
  content         String      @db.Text
  reasoningContent String?    @db.Text // Store AI reasoning/thinking content
  documents       String?     @db.Text // Store document information as JSON
  createdAt       DateTime    @default(now())
  session         ChatSession @relation(fields: [sessionId], references: [id])
}

model Document {
  id           String   @id @default(uuid())
  userId       String
  fileName     String
  path         String
  originalName String
  mimeType     String
  createdAt    DateTime @default(now())
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}


model RagQueryLog {
  id           String   @id @default(uuid())
  userId       String?
  query        String
  answer       String
  sources      Json
  createdAt    DateTime @default(now())
}

model DocumentChunkMetadata {
  id           String   @id @default(uuid())
  chunkId      String   @unique
  title        String?
  fileName     String?
  createdAt    DateTime @default(now())
}

model AgentMemory {
  id           String   @id @default(uuid())
  sessionId    String
  userId       String
  type         String   // 'conversation' | 'reasoning' | 'decision' | 'context' | 'insight'
  content      String   @db.Text
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())
  accessedAt   DateTime @default(now())
  accessCount  Int      @default(1)
  
  @@index([sessionId, userId])
  @@index([type])
  @@index([accessedAt])
}

model AdminInvite {
  code        String   @id // Random 32-char token
  email       String
  invitedBy   String?  // References admin who created the invite
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  redeemed    Boolean  @default(false)
  redeemedAt  DateTime?
  
  invitedByAdmin Admin? @relation(fields: [invitedBy], references: [id])
  
  @@index([email])
  @@index([code])
}

model Feedback {
  id           String   @id @default(uuid())
  userId       String    // The user who submitted the feedback
  sessionId    String
  messageIndex Int?
  rating       String   // 'good' | 'bad'
  comments     String?
  createdAt    DateTime @default(now())
  
  // Relations for data integrity and admin access
  user         User     @relation(fields: [userId], references: [id])
  session      ChatSession @relation(fields: [sessionId], references: [id])
  
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
  @@unique([userId, sessionId, messageIndex]) // Prevent duplicate feedback for same message
}

// ========================================
// PLEADSMART-SPECIFIC MODELS
// ========================================

model PleadSmartChatSession {
  id        String                    @id @default(uuid())
  userId    String
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  messages  PleadSmartChatMessage[]
  feedbacks PleadSmartFeedback[]
  user      User                      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([createdAt])
}

model PleadSmartChatMessage {
  id              String                @id @default(uuid())
  sessionId       String
  role            MessageRole
  content         String                @db.Text
  reasoningContent String?              @db.Text // Store AI reasoning/thinking content
  documents       String?               @db.Text // Store document information as JSON
  createdAt       DateTime              @default(now())
  session         PleadSmartChatSession @relation(fields: [sessionId], references: [id])
  
  @@index([sessionId])
  @@index([createdAt])
}

model PleadSmartDocument {
  id           String   @id @default(uuid())
  userId       String
  fileName     String
  path         String
  originalName String
  mimeType     String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([createdAt])
}

model PleadSmartRagQueryLog {
  id           String   @id @default(uuid())
  userId       String?
  query        String
  answer       String
  sources      Json
  createdAt    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([createdAt])
}

model PleadSmartDocumentChunkMetadata {
  id           String   @id @default(uuid())
  chunkId      String   @unique
  title        String?
  fileName     String?
  createdAt    DateTime @default(now())
  
  @@index([chunkId])
}

model PleadSmartAgentMemory {
  id           String   @id @default(uuid())
  sessionId    String
  userId       String
  type         String   // 'conversation' | 'reasoning' | 'decision' | 'context' | 'insight'
  content      String   @db.Text
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())
  accessedAt   DateTime @default(now())
  accessCount  Int      @default(1)
  user         User     @relation(fields: [userId], references: [id])
  
  @@index([sessionId, userId])
  @@index([type])
  @@index([accessedAt])
}

model PleadSmartFeedback {
  id           String                @id @default(uuid())
  userId       String                // The user who submitted the feedback
  sessionId    String
  messageIndex Int?
  rating       String                // 'good' | 'bad'
  comments     String?
  createdAt    DateTime              @default(now())
  
  // Relations for data integrity and admin access
  user         User                  @relation(fields: [userId], references: [id])
  session      PleadSmartChatSession @relation(fields: [sessionId], references: [id])
  
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
  @@unique([userId, sessionId, messageIndex]) // Prevent duplicate feedback for same message
}

model CareerSubmission {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String
  position  String
  linkedin  String?
  portfolio String?
  cover     String?
  resumeUrl String
  createdAt DateTime @default(now())
}