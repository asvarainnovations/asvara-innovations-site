generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  passwordHash  String
  fullName      String?
  role          UserRole      @default(USER)
  isActive      Boolean       @default(true)
  deletedAt     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  mfaEnabled    Boolean       @default(false)
  mfaSecret     String?
  name          String?
  emailVerified DateTime?
  image         String?
  gender        String?
  accounts      Account[]
  apiKeys       ApiKey[]
  auditLogs     AuditLog[]
  sessions      Session[]
  subscriptions Subscription[]
}

model Service {
  id            String             @id @default(uuid())
  key           String             @unique
  name          String
  description   String?
  logoUrl       String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  apiKeys       ApiKey[]
  subscriptions Subscription[]
  plans         SubscriptionPlan[]
}

model SubscriptionPlan {
  id            String          @id @default(uuid())
  serviceId     String
  name          String
  priceCents    Int
  interval      BillingInterval
  description   String?
  isActive      Boolean         @default(true)
  trialDays     Int?
  features      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  subscriptions Subscription[]
  service       Service         @relation(fields: [serviceId], references: [id])
}

model Subscription {
  id                String             @id @default(uuid())
  userId            String
  planId            String
  serviceId         String
  status            SubscriptionStatus @default(ACTIVE)
  startDate         DateTime
  endDate           DateTime?
  renewalDate       DateTime?
  canceledAt        DateTime?
  paymentProviderId String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  plan              SubscriptionPlan   @relation(fields: [planId], references: [id])
  service           Service            @relation(fields: [serviceId], references: [id])
  user              User               @relation(fields: [userId], references: [id])
}

model ApiKey {
  id         String    @id @default(uuid())
  userId     String
  serviceId  String
  token      String    @unique
  revoked    Boolean   @default(false)
  revokedAt  DateTime?
  expiresAt  DateTime?
  lastUsedAt DateTime?
  name       String?
  createdAt  DateTime  @default(now())
  service    Service   @relation(fields: [serviceId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
}
